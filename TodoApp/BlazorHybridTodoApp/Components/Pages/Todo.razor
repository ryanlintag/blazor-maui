@page "/todo"
@using System.Text.Json
@inject TodoService todoService
@inject IConnectivity connectivityService

<h3>Todo (@todos.Count(p => !p.IsDone))</h3>

<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type="checkbox" @bind="todo.IsDone"/>
            <input type="text" @bind="todo.Title"/>
        </li>
    }
</ul>

@if (!hasInternet)
{
    <p>No Internet!!</p>
}
<input placeholder="Something todo" @bind="newTodo"/>
<button @onclick="AddTodo">Add Todo</button>
<button @onclick="Save">Save</button>
<button @onclick="Upload">Upload</button>
@code {
    List<TodoItem> todos = new List<TodoItem>();
    string newTodo;
    bool hasInternet = true;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var items = todoService.LoadItems();
        todos.AddRange(items);
    }

    void AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodo))
        {
            return;
        }

        todos.Add(new TodoItem
        {
            Title = newTodo
        });
        newTodo = string.Empty;
    }
    void Save()
    {
        todoService.SaveItems(todos);
    }
    void Upload()
    {
        if (connectivityService is null) return;
        hasInternet = connectivityService.NetworkAccess == NetworkAccess.Internet;
    }
    public class TodoItem
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public bool IsDone { get; set; }
    }
    public class TodoService
    {
        string file = string.Empty;
        public TodoService()
        {
            file = Path.Combine(Environment.GetFolderPath(
                    Environment.SpecialFolder.ApplicationData), 
                    "items.json");
        }
        public void SaveItems(IEnumerable<TodoItem> items)
        {
            File.WriteAllText(file, JsonSerializer.Serialize(items));
        }
        public IEnumerable<TodoItem> LoadItems()
        {
            if (!File.Exists(file)) return Enumerable.Empty<TodoItem>();
            var itemJson = File.ReadAllText(file);
            return JsonSerializer.Deserialize<IEnumerable<TodoItem>>(itemJson) ?? Enumerable.Empty<TodoItem>();
        }
    }
}
